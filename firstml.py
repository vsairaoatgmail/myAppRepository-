# -*- coding: utf-8 -*-
"""firstML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BgD4Hke5ud5jGnJDYTTK7CBjYN5ZI_e3
"""

#!/usr/bin/python
from sklearn import tree
from sklearn.datasets import load_iris
import numpy as np

#####################################
#  Apples vs Orange classification
#####################################
def appleOrange():
  # ML code to classify Apple vs Orange
  # Within Feature: 0 means bumpy, 1 means smooth
  # Within Label: 0 means Apple, 1 means Orange 

  # Step-1: collect the training data
  features = [[140, 1], [130, 1], [150, 0], [170, 0]]
  labels = [0, 0, 1, 1]

  # Step-2: collect the training data
  clf = tree.DecisionTreeClassifier()

  # Step-3: train model or find patterns in the data 
  clf = clf.fit(features, labels)

  # Step-4: classify new input data
  print (clf.predict([[150,0]]))

  
#####################################
#  Iris flower type classification
#####################################
def irisClassifier():
  # ML code to classify Apple vs Orange
  
  # loading iris data set and printing them to view
  iris = load_iris()
  print (iris.feature_names)  # output: ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']
  print (iris.target_names)   # output: ['setosa' 'versicolor' 'virginica']
  print (iris.data[0])  # input values of first record:  [5.1 3.5 1.4 0.2]
  print (iris.target)   # basically flower types - 0, 1, 2 for 150 rows 
  
  # to display all training data records - 150 records
  #for i in range(len(iris.target)):
  #  print ("example %d: label %s, features %s" %(i, iris.target[i], iris.data[i]))
  
  # training data  
  # take out total 3 records from training so that we can use them for testing 
  # one record of each type from input data - 150 (3*50 records)
  # means this data is never seen before by training model  
  test_idx = [0, 50, 100]
  train_target = np.delete(iris.target, test_idx)
  train_data = np.delete(iris.data, test_idx, axis=0)

  # testing data  
  test_target = iris.target[test_idx]
  test_data = iris.data[test_idx]
  
  clf = tree.DecisionTreeClassifier()
  clf.fit(train_data, train_target)
  print(test_target) # checking test target
  print(test_data) # checking test data
  
  print(clf.predict(test_data))
  
  #Vizualize the code
  from sklearn.externals.six import StringIO
  import pydot
  dot_data = StringIO()
  tree.export_graphviz(clf, 
                          out_file=dot_data,
                          feature_names=iris.feature_names,
                          class_names=iris.target_names,
                          filled=True, rounded=True,
                          impurity=False)
  graph = pydot.graph_from_dot_data(dot_data.getvalue())
  graph.write_pdf("irsi.pdf")

  
  
####################################################
# Main Body, which is calling methods/functions
####################################################
  
#appleOrange()
irisClassifier()