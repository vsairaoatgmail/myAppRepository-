# -*- coding: utf-8 -*-
"""first_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HQvACAvyRn7wXmrdOuKDzIY-OK-lJ8Zj
"""

########################################
# Example - Writing our own classifier
########################################
#!/usr/bin/python

import random
from scipy.spatial import distance

# to calculate euclidean distance  
# a -training data, b-testing data
# if test data is closer to more no of training data, we classify accordingly
def euc(a, b):
  return distance.euclidean(a,b)

# this class is our own custom classifier
class ScrappyKNN():
  def fit(self, X_Train, y_train):
    self.X_train = X_train
    self.y_train = y_train
  
  # X-Test is 2D array
  def predict(self, X_test):
    predictions = []
    for row in X_test:
      label = self.closest(row)
      predictions.append(label)
    return predictions
  
  def closest(self, row):
    best_dist = euc(row, self.X_train[0])
    best_index = 0
    for i in range(1, len(self.X_train)):
      dist = euc(row, self.X_train[i])
      if dist < best_dist:
        best_dist = dist
        best_index = i
    return self.y_train[best_index]

  
from sklearn import tree
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
import numpy as np
  
# import iris data set
iris = datasets.load_iris()
  
X = iris.data
y = iris.target

# split into train & test - 50% each  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .5)

# classifier initialization
#my_classifier = KNeighborsClassifier()          # one type of classifier
my_classifier = ScrappyKNN()                     # own classifier

# train our classifier
my_classifier.fit(X_train, y_train)

# test to see how accurate our classifier
predictions = my_classifier.predict(X_test)
  
print (accuracy_score(y_test, predictions))